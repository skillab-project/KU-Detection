pipeline {
    agent {
        node {
            label 'dev-server'
        }
    }
    options {
        skipDefaultCheckout true
    }
    environment {
        APP_NAME = "ku-detection"
        MAJOR_RELEASE = 0.1
        DOCKER_TAG = "${MAJOR_RELEASE}.${env.BUILD_NUMBER}"
        DOCKER_REG = "harbor.skillab-project.eu"
        DOCKER_REPO = "/skillab-all/"
        DOCKER_REG_CREDS = "harbor-creds"
	/// Tells Python not to create __pycache__ folders.
        PYTHONDONTWRITEBYTECODE = '1'
    }

    stages {
	// *************************
        // *** PREPARATION STAGE ***
        // *************************
        stage('Preparation') {
            steps {
                echo "***** Cleaning Workspace and Checking Out Code *****"
                cleanWs()
                checkout scm
            }
        }
	
        // *************************
        // *** TESTING STAGE ***
        // *************************
        stage("Run_Unit_Tests") {
            steps {
                echo "***** Running Unit Tests *****"
				sh '''
					docker run --rm \
						-v "$PWD":/tmp/app_files \
						nikosnikolaidis/skillab-ku-backend-base bash -c "
							# Move files from /tmp/app_files to /app
							cp -r /tmp/app_files/* /app/ 

							# Change working directory to /app and run the commands
							cd /app && \
							pip install -r requirements.txt && \
							python -m unittest discover
						"
				'''
                
            }
        }
        
        // *************************
        // *** IMAGE BUILD STAGE ***
        // *************************
        stage("Build_Docker_Images"){
            steps {
                echo "***** Building Docker Image *****"
                sh 'DOCKER_TAG=test docker compose build'
            }
        }

        // ****************************
        // *** Push Images In Harbor ***
        // ****************************
        stage("Push_Image"){
            when {
                environment name: "GIT_BRANCH", value: "origin/main"
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${DOCKER_REG_CREDS}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]){
                    echo "***** Push Docker Image *****"
                    sh 'docker compose build'
                    sh 'docker login ${DOCKER_REG} -u ${USERNAME} -p ${PASSWORD}'
                    sh 'docker image push ${DOCKER_REG}${DOCKER_REPO}${APP_NAME}:${DOCKER_TAG}'
                    sh 'DOCKER_TAG="latest" docker compose build'
                    sh 'docker image push ${DOCKER_REG}${DOCKER_REPO}${APP_NAME}:latest'
                }
            }
        }
        
        // **************
        // *** Deploy ***
        // **************
        stage("Deployment"){
            when {
                environment name: "GIT_BRANCH", value: "origin/main"
            }

            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${DOCKER_REG_CREDS}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]){
                    echo "***** Deploy Application *****"
                    sh 'docker login ${DOCKER_REG} -u ${USERNAME} -p ${PASSWORD}'
                    sh 'docker compose pull'
                    sh 'docker compose up -d'
                    sh 'docker ps'
                }
            }
        }
    }
    post{
        always {
            // Remove specific images
            sh 'docker rmi ${APP_NAME}:test || true'
        }
        failure {
            echo "Build failed. Cleaned up docker environment."
            sh 'DOCKER_TAG=test docker compose down --rmi all --volumes --remove-orphans || true'
            sh 'docker rmi ${APP_NAME}:${DOCKER_TAG} || true'
            sh 'docker rmi ${APP_NAME}:latest || true'
        }
    }
}
